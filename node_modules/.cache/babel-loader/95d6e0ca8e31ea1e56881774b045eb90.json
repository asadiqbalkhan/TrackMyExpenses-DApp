{"ast":null,"code":"var _jsxFileName = \"/Users/asadiqbal/Documents/Project Test /tracker-ui-react/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer, useEffect } from 'react';\nimport AppReducer from './AppReducer';\nimport Web3 from 'web3';\nimport { TRACKER_ABI, TRACKER_ADDRESS } from '../contract/abi';\nimport MetaMaskLoading from '@metamask/onboarding'; // Initial state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  transactions: [],\n  web3: null,\n  contract: null\n}; // Create context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // Provider component\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  useEffect(() => {\n    loadBlockchainData();\n  }, []); //Created check function to see if the MetaMask extension is installed\n\n  const isMetaMaskInstalled = () => {\n    //Have to check the ethereum binding on the window object to see if it's installed\n    const {\n      ethereum\n    } = window;\n    return Boolean(ethereum && ethereum.isMetaMask);\n  };\n\n  const MetaMaskClientCheck = () => {\n    //Now we check to see if Metmask is installed\n    if (!isMetaMaskInstalled()) {\n      //If it isn't installed we ask the user to click to install it\n      onboardButton.innerText = 'Click here to install MetaMask!'; //When the button is clicked we call th is function\n\n      onboardButton.onclick = onClickInstall; //The button is now disabled\n\n      onboardButton.disabled = false;\n    } else {\n      //If MetaMask is installed we ask the user to connect to their wallet\n      onboardButton.innerText = 'Connect'; //When the button is clicked we call this function to connect the users MetaMask Wallet\n\n      onboardButton.onclick = onClickConnect; //The button is now disabled\n\n      onboardButton.disabled = false;\n    }\n  }; // this function loads web3 in the browser and blockchain data (accounts, owner , methods etc)\n\n\n  async function loadBlockchainData() {\n    try {\n      const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n      await Web3.givenProvider.enable(); //call setups for web3 and contract\n\n      web3Setup(web3);\n      console.log(\"Web3 successfully injected in browser\");\n      const contract = new web3.eth.Contract(TRACKER_ABI, TRACKER_ADDRESS);\n      contractSetup(contract);\n      console.log(\"Contract Initialized = \", contract);\n      let getTransactionCount = await contract.methods.getTransactionCount().call();\n      console.log(\"Transactions available = \", getTransactionCount); // loop through available transactions to instantiate object and add it in the array\n\n      for (var i = 0; i < getTransactionCount; i++) {\n        const {\n          amount,\n          transactionDetails,\n          owner\n        } = await contract.methods.transaction(i).call();\n        let transactionObject = {\n          amount: parseInt(amount),\n          transactionDetails,\n          owner\n        };\n        console.log(\"Checking Transaciton Obj\", transactionObject); // add obj in transaction array\n\n        addTransaction(transactionObject);\n      }\n    } catch (e) {\n      MetaMaskClientCheck();\n      console.log(\"Web3 injection unsuccessful\", e);\n    }\n  } // actions \n\n\n  function deleteTransaction(id) {\n    dispatch({\n      type: 'DELETE_TRANSACTION',\n      payload: id\n    });\n  }\n\n  async function asyncAddTransaction(transaction) {\n    const {\n      web3,\n      contract\n    } = state;\n    const account = await web3.eth.getAccounts();\n    console.log(\"Transaction Pending\");\n    const receipt = await contract.methods.addTransaction(transaction.transactionDetails, transaction.amount).send({\n      from: account[0]\n    });\n    addTransaction(transaction);\n    console.log(\"Transaction Completed\");\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload: transaction\n    });\n  }\n\n  function web3Setup(web3) {\n    dispatch({\n      type: 'SETUP_WEB3',\n      payload: web3\n    });\n  }\n\n  function contractSetup(contract) {\n    dispatch({\n      type: 'SETUP_CONTRACT',\n      payload: contract\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions,\n      deleteTransaction,\n      asyncAddTransaction,\n      addTransaction,\n      web3: state.web3,\n      contract: state.contract\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/Users/asadiqbal/Documents/Project Test /tracker-ui-react/src/context/GlobalState.js"],"names":["React","createContext","useReducer","useEffect","AppReducer","Web3","TRACKER_ABI","TRACKER_ADDRESS","MetaMaskLoading","initialState","transactions","web3","contract","GlobalContext","GlobalProvider","children","state","dispatch","loadBlockchainData","isMetaMaskInstalled","ethereum","window","Boolean","isMetaMask","MetaMaskClientCheck","onboardButton","innerText","onclick","onClickInstall","disabled","onClickConnect","givenProvider","enable","web3Setup","console","log","eth","Contract","contractSetup","getTransactionCount","methods","call","i","amount","transactionDetails","owner","transaction","transactionObject","parseInt","addTransaction","e","deleteTransaction","id","type","payload","asyncAddTransaction","account","getAccounts","receipt","send","from"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer, useEffect} from 'react';\nimport AppReducer from './AppReducer';\nimport Web3 from 'web3';\nimport { TRACKER_ABI, TRACKER_ADDRESS } from '../contract/abi';\nimport MetaMaskLoading from '@metamask/onboarding'\n\n\n// Initial state\nconst initialState = {\n    transactions: [],\n    web3: null,\n    contract: null,\n}\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Provider component\nexport const GlobalProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n   \n    useEffect(() => {\n        loadBlockchainData();\n    }, []);\n\n    //Created check function to see if the MetaMask extension is installed\n  const isMetaMaskInstalled = () => {\n    //Have to check the ethereum binding on the window object to see if it's installed\n    const { ethereum } = window;\n    return Boolean(ethereum && ethereum.isMetaMask);\n  };\n  \n    const MetaMaskClientCheck = () => {\n        //Now we check to see if Metmask is installed\n        if (!isMetaMaskInstalled()) {\n          //If it isn't installed we ask the user to click to install it\n          onboardButton.innerText = 'Click here to install MetaMask!';\n          //When the button is clicked we call th is function\n          onboardButton.onclick = onClickInstall;\n          //The button is now disabled\n          onboardButton.disabled = false;\n        } else {\n          //If MetaMask is installed we ask the user to connect to their wallet\n          onboardButton.innerText = 'Connect';\n          //When the button is clicked we call this function to connect the users MetaMask Wallet\n          onboardButton.onclick = onClickConnect;\n          //The button is now disabled\n          onboardButton.disabled = false;\n        }\n      };\n\n    // this function loads web3 in the browser and blockchain data (accounts, owner , methods etc)\n    async function loadBlockchainData(){\n        try {\n            const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n            await Web3.givenProvider.enable();\n            //call setups for web3 and contract\n            web3Setup(web3);\n            console.log(\"Web3 successfully injected in browser\");\n            const contract = new web3.eth.Contract(TRACKER_ABI, TRACKER_ADDRESS);\n            contractSetup(contract);\n            console.log(\"Contract Initialized = \", contract);\n            let getTransactionCount = await contract.methods.getTransactionCount().call();\n            console.log(\"Transactions available = \", getTransactionCount);\n            // loop through available transactions to instantiate object and add it in the array\n            for(var i = 0 ; i < getTransactionCount; i++){\n                const{amount, transactionDetails, owner} = await contract.methods.transaction(i).call();\n                let transactionObject = {\n                    amount: parseInt(amount),\n                    transactionDetails,\n                    owner\n                }\n                console.log(\"Checking Transaciton Obj\", transactionObject);\n                // add obj in transaction array\n                addTransaction(transactionObject);\n            }\n            \n        } catch(e){\n            MetaMaskClientCheck();\n            console.log(\"Web3 injection unsuccessful\", e);\n        }\n    }\n    // actions \n    function deleteTransaction(id){\n        dispatch({\n            type: 'DELETE_TRANSACTION',\n            payload: id\n        });\n    }\n\n    async function asyncAddTransaction(transaction){\n        const {web3, contract} = state;\n        const account = await web3.eth.getAccounts();\n        console.log(\"Transaction Pending\");\n        const receipt = await contract.methods.addTransaction(transaction.transactionDetails, transaction.amount).send({from: account[0]});\n        addTransaction(transaction);\n        console.log(\"Transaction Completed\")\n    }\n\n    function addTransaction(transaction){\n        dispatch({\n            type: 'ADD_TRANSACTION',\n            payload: transaction\n        });\n    }\n    function web3Setup(web3){\n        dispatch({\n            type: 'SETUP_WEB3',\n            payload: web3\n        });\n    }\n    function contractSetup(contract){\n        dispatch({\n            type: 'SETUP_CONTRACT',\n            payload: contract\n        });\n    }\n\n    return (\n    <GlobalContext.Provider value={{transactions:state.transactions,\n                                     deleteTransaction,\n                                     asyncAddTransaction,\n                                      addTransaction,\n                                      web3: state.web3,\n                                      contract: state.contract\n                                      }}>\n        {children}\n    </GlobalContext.Provider>);\n    \n}\n"]},"metadata":{},"sourceType":"module"}