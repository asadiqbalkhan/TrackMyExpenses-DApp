{"ast":null,"code":"var _jsxFileName = \"/Users/asadiqbal/Documents/Blockchain Development/expense-tracker-react/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer, useEffect } from 'react';\nimport AppReducer from './AppReducer';\nimport Web3 from 'web3'; // Initial state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  transactions: [],\n  we3: null,\n  contract: null\n}; // Create context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // Provider component\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  useEffect(() => {\n    loadBlockchainData();\n  }, []); // this function loads web3 in the browser and\n\n  async function loadBlockchainData() {\n    try {\n      const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n      await Web3.givenProvider.enabled(); //call setups for web3 and contract\n\n      web3Setup(web3);\n      console.log(\"Web3 successfully injected in browser\");\n      const contract = new web3.eth.Contract(TRACKER_ABI, TRACKER_ADDRESS);\n      contractSetup(contract);\n      console.log(\"contract setup successful = \", contract);\n      let getTransactionCount = await contract.methods.getTransactionCount().call();\n      console.log(\"transactions performed = \", getTransactionCount);\n\n      for (var i = 0; i < getTransactionCount; i++) {\n        const {\n          amount,\n          transactionDetails,\n          owner\n        } = await contract.methods.transaction(i).call();\n        let transactionObject = {\n          amount: parseInt(amount),\n          transactionDetails,\n          owner\n        };\n        console.log(\"transactions in object\", transactionObject);\n        addTransaction(transactionObject);\n      }\n    } catch (e) {}\n  } // actions \n\n\n  function deleteTransaction(id) {\n    dispatch({\n      type: 'DELETE_TRANSACTION',\n      payload: id\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload: transaction\n    });\n  }\n\n  function web3Setup(web3) {\n    dispatch({\n      type: 'SETUP_WEB3',\n      payload: web3\n    });\n  }\n\n  function contractSetup(contract) {\n    dispatch({\n      type: 'SETUP_CONTRACT',\n      payload: web3\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions,\n      deleteTransaction,\n      addTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/Users/asadiqbal/Documents/Blockchain Development/expense-tracker-react/src/context/GlobalState.js"],"names":["React","createContext","useReducer","useEffect","AppReducer","Web3","initialState","transactions","we3","contract","GlobalContext","GlobalProvider","children","state","dispatch","loadBlockchainData","web3","givenProvider","enabled","web3Setup","console","log","eth","Contract","TRACKER_ABI","TRACKER_ADDRESS","contractSetup","getTransactionCount","methods","call","i","amount","transactionDetails","owner","transaction","transactionObject","parseInt","addTransaction","e","deleteTransaction","id","type","payload"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer, useEffect} from 'react';\nimport AppReducer from './AppReducer';\nimport Web3 from 'web3';\n\n\n// Initial state\nconst initialState = {\n    transactions: [],\n    we3: null,\n    contract: null,\n}\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Provider component\nexport const GlobalProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n   \n    useEffect(() => {\n        loadBlockchainData();\n        \n    }, []);\n\n    // this function loads web3 in the browser and\n    async function loadBlockchainData(){\n        try {\n            const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n            await Web3.givenProvider.enabled();\n            //call setups for web3 and contract\n            web3Setup(web3);\n            console.log(\"Web3 successfully injected in browser\");\n            const contract = new web3.eth.Contract(TRACKER_ABI, TRACKER_ADDRESS);\n            contractSetup(contract);\n            console.log(\"contract setup successful = \", contract);\n            let getTransactionCount = await contract.methods.getTransactionCount().call();\n            console.log(\"transactions performed = \", getTransactionCount);\n            for(var i = 0 ; i < getTransactionCount; i++){\n                const{amount, transactionDetails, owner} = await contract.methods.transaction(i).call();\n                let transactionObject = {\n                    amount: parseInt(amount),\n                    transactionDetails,\n                    owner\n                }\n                console.log(\"transactions in object\", transactionObject);\n                addTransaction(transactionObject);\n            }\n            \n        } catch(e){\n\n        }\n    }\n    // actions \n    function deleteTransaction(id){\n        dispatch({\n            type: 'DELETE_TRANSACTION',\n            payload: id\n        });\n    }\n    function addTransaction(transaction){\n        dispatch({\n            type: 'ADD_TRANSACTION',\n            payload: transaction\n        });\n    }\n    function web3Setup(web3){\n        dispatch({\n            type: 'SETUP_WEB3',\n            payload: web3\n        });\n    }\n    function contractSetup(contract){\n        dispatch({\n            type: 'SETUP_CONTRACT',\n            payload: web3\n        });\n    }\n\n\n    \n\n    return (\n    <GlobalContext.Provider value={{transactions:state.transactions, deleteTransaction, addTransaction}}>\n        {children}\n    </GlobalContext.Provider>);\n    \n}\n"]},"metadata":{},"sourceType":"module"}