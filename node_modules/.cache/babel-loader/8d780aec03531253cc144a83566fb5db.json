{"ast":null,"code":"var _jsxFileName = \"/Users/asadiqbal/Documents/Blockchain Development/expense-tracker-react/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\nimport Web3 from 'web3'; // Initial state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  transactions: [],\n  we3: null,\n  contract: null\n}; // Create context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // Provider component\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  useEffect(() => {\n    loadBlockchainData();\n  }, []); // this function loads web3 in the browser and\n\n  async function loadBlockchainData() {\n    try {\n      const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n      await Web3.givenProvider.enabled();\n    } catch (e) {}\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload: transaction\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions,\n      deleteTransaction,\n      addTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/Users/asadiqbal/Documents/Blockchain Development/expense-tracker-react/src/context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","Web3","initialState","transactions","we3","contract","GlobalContext","GlobalProvider","children","state","dispatch","useEffect","loadBlockchainData","web3","givenProvider","enabled","e","addTransaction","transaction","type","payload","deleteTransaction"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAgD,OAAhD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CAGA;;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE,EADG;AAEjBC,EAAAA,GAAG,EAAE,IAFY;AAGjBC,EAAAA,QAAQ,EAAE;AAHO,CAArB,C,CAMA;;AACA,OAAO,MAAMC,aAAa,gBAAGR,aAAa,CAACI,YAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAMK,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,UAAU,CAACC,UAAD,EAAaE,YAAb,CAApC;AAEAS,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,kBAAkB;AAErB,GAHQ,EAGN,EAHM,CAAT,CAH4C,CAQ5C;;AACA,iBAAeA,kBAAf,GAAmC;AAC/B,QAAI;AACA,YAAMC,IAAI,GAAG,IAAIZ,IAAJ,CAASA,IAAI,CAACa,aAAL,IAAsB,uBAA/B,CAAb;AACA,YAAMb,IAAI,CAACa,aAAL,CAAmBC,OAAnB,EAAN;AAEH,KAJD,CAIE,OAAMC,CAAN,EAAQ,CAET;AACJ;;AAED,WAASC,cAAT,CAAwBC,WAAxB,EAAoC;AAChCR,IAAAA,QAAQ,CAAC;AACLS,MAAAA,IAAI,EAAE,iBADD;AAELC,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAIH;;AAED,sBACA,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAACf,MAAAA,YAAY,EAACM,KAAK,CAACN,YAApB;AAAkCkB,MAAAA,iBAAlC;AAAqDJ,MAAAA;AAArD,KAA/B;AAAA,cACKT;AADL;AAAA;AAAA;AAAA;AAAA,UADA;AAKH,CA/BM;;GAAMD,c;;KAAAA,c","sourcesContent":["import React, { createContext, useReducer} from 'react';\nimport AppReducer from './AppReducer';\nimport Web3 from 'web3';\n\n\n// Initial state\nconst initialState = {\n    transactions: [],\n    we3: null,\n    contract: null,\n}\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Provider component\nexport const GlobalProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n   \n    useEffect(() => {\n        loadBlockchainData();\n        \n    }, []);\n\n    // this function loads web3 in the browser and\n    async function loadBlockchainData(){\n        try {\n            const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n            await Web3.givenProvider.enabled();\n            \n        } catch(e){\n            \n        }\n    }\n\n    function addTransaction(transaction){\n        dispatch({\n            type: 'ADD_TRANSACTION',\n            payload: transaction\n        });\n    }\n\n    return (\n    <GlobalContext.Provider value={{transactions:state.transactions, deleteTransaction, addTransaction}}>\n        {children}\n    </GlobalContext.Provider>);\n    \n}\n"]},"metadata":{},"sourceType":"module"}